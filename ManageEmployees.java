
import java.awt.TextField;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Clock;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dawoud
 */
public class ManageEmployees extends javax.swing.JFrame {

    /**
     * Creates new form ManageEmployees
     */
    private MyHashTable mainHT;
    int empNum;
    String EmployeeFile = "Employees.txt";

    public ManageEmployees() {
        initComponents();
    }

    public void setMainHT(MyHashTable refvalForHT) {
        mainHT = refvalForHT;
    }

    boolean isFTE = true;
    boolean isPTE = true;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        updateButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Save Employees");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load Employees");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addGap(39, 39, 39)
                        .addComponent(jButton3)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        addRowToJTable();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        writeToFile();
        JOptionPane.showMessageDialog(this, "Employees Sucessfully Exported To File");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        readFromFile();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public void addRowToJTable() {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];

        while (model.getRowCount() > 0) {
            for (int i = 0; i < model.getRowCount(); i++) {
                model.removeRow(i);
            }
        }

        //Going through the hash table
        for (int i = 0; i < mainHT.buckets.length; i++) {

            if (mainHT.buckets[i].size() == 0) {
                // Do nothing
            }

            for (int j = 0; j < mainHT.buckets[i].size(); j++) {
                //Displaying info about a particular employee
                rowData[0] = mainHT.buckets[i].get(j).getEmpNum();
                rowData[1] = mainHT.buckets[i].get(j).getFirstName();
                rowData[2] = mainHT.buckets[i].get(j).getLastName();
                model.addRow(rowData);
            }

        }

    }

    //private void deleteActionPerformed(java.awt.event.ActionEvent evt) {
    public void writeToFile() {
        try {
            FileWriter fileWriter = new FileWriter(EmployeeFile);
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            for (int i = 0; i < mainHT.buckets.length; i++) {

                for (int j = 0; j < mainHT.buckets[i].size(); j++) {

                    EmployeeInfo someEmployee = mainHT.getFromTable(mainHT.buckets[i].get(j).getEmpNum());
                    if (someEmployee instanceof FTE) {
                        FTE someFTE = (FTE) mainHT.getFromTable(mainHT.buckets[i].get(j).getEmpNum());
                        bufferedWriter.write("FTE");
                        bufferedWriter.newLine();

                        bufferedWriter.write(String.valueOf(someEmployee.getEmpNum()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(someEmployee.getFirstName());
                        bufferedWriter.newLine();
                        bufferedWriter.write(someEmployee.getLastName());
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getGender()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getWorkLoc()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getDeductRate()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someFTE.getyS()));
                        bufferedWriter.newLine();
                        bufferedWriter.write("#");
                        bufferedWriter.newLine();

                    } else {
                        PTE somePTE = (PTE) mainHT.getFromTable(mainHT.buckets[i].get(j).getEmpNum());
                        bufferedWriter.write("PTE");
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getEmpNum()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(someEmployee.getFirstName());
                        bufferedWriter.newLine();
                        bufferedWriter.write(someEmployee.getLastName());
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getGender()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getWorkLoc()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(someEmployee.getDeductRate()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(somePTE.gethW()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(somePTE.gethPW()));
                        bufferedWriter.newLine();
                        bufferedWriter.write(String.valueOf(somePTE.getwPY()));
                        bufferedWriter.newLine();
                        bufferedWriter.write("#");
                        bufferedWriter.newLine();

//                    if (someEmployee instanceof FTE) {
//                        FTE someFTE = (FTE) mainHT.getFromTable(mainHT.buckets[i].get(j).getEmpNum());
//                        bufferedWriter.write("FTE");
//                        bufferedWriter.newLine();
//                        bufferedWriter.write(String.valueOf(someFTE.getyS()));
//
//                    } else {
//                        PTE somePTE = (PTE) mainHT.getFromTable(mainHT.buckets[i].get(j).getEmpNum());
//                        bufferedWriter.write("PTE");
//                        bufferedWriter.newLine();
//                        bufferedWriter.write(String.valueOf(somePTE.gethW()));
//                        bufferedWriter.newLine();
//                        bufferedWriter.write(String.valueOf(somePTE.gethPW()));
//                        bufferedWriter.newLine();
//                        bufferedWriter.write(String.valueOf(somePTE.getwPY()));
//
//                    }
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(String.valueOf(someEmployee.getEmpNum()));
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(someEmployee.getFirstName());
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(someEmployee.getLastName());
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(String.valueOf(someEmployee.getGender()));
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(String.valueOf(someEmployee.getWorkLoc()));
//                    bufferedWriter.newLine();
//                    bufferedWriter.write(String.valueOf(someEmployee.getDeductRate()));
//                    bufferedWriter.newLine();
//                    bufferedWriter.write("#");
//                    bufferedWriter.newLine();
                    }

                }
            }
            bufferedWriter.close();
        } catch (IOException error) {
            System.out.println("Error Detected In Writing To File");
        }
    }

    public void readFromFile() {
        Scanner scanner = new Scanner(System.in);
        BufferedReader br = null;
        String line;
        int c = 0;
        EmployeeInfo Employee;

        try {
            br = new BufferedReader(new FileReader(EmployeeFile));

        } catch (FileNotFoundException fnfex) {
            JOptionPane.showMessageDialog(this, "File not found");
        }

        try {
//            while ((line = br.readLine()) != null){
//                System.out.println(line);
//                
//                if (c == 0){
//                    if (line.equals("FTE")){
//                        isFTE = true;
//                    FTE theFTE;
//                    c = 1;
//                    }
//                    if (line.equals("PTE")){
//                        isPTE = true;
//                    PTE thePTE;
//                    c = 1;
//                }
//                if (c == 1){
//                    if(isFTE = true){
//                        
//                        
//                    }
//                }
//                
//                }
//            }

            while ((line = br.readLine()) != null) {
  
                if (line.equals("FTE")) {
                    FTE theFTE;
                    theFTE = new FTE(Integer.parseInt(br.readLine()), br.readLine(), br.readLine(),
                            Integer.parseInt(br.readLine()), Integer.parseInt(br.readLine()),
                            Float.parseFloat(br.readLine()), Float.parseFloat(br.readLine()));

                    mainHT.addEmployee(theFTE);
                    
                    
    
                }
                if (line.equals("PTE")) {
                    
                    PTE thePTE;
                    thePTE = new PTE(Integer.parseInt(br.readLine()), br.readLine(), br.readLine(),
                            Integer.parseInt(br.readLine()), Integer.parseInt(br.readLine()),
                            Float.parseFloat(br.readLine()), Float.parseFloat(br.readLine()),
                            Float.parseFloat(br.readLine()), Float.parseFloat(br.readLine()));

                    mainHT.addEmployee(thePTE);
                    
                    
                    
                }

                if (line.equals("#")) {
                                  
                }
                  
            }
        } catch (IOException ioex) {
            JOptionPane.showMessageDialog(this, "Error Reading File");
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageEmployees().setVisible(true);
            }
        });

    }
    
 
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
